@using CarPooling.Data.Models.Pagination;
@using CarPooling.Data.Models;
@using Carpooling.Service.Dto_s.Responses;

@{
    this.ViewData["Title"] = "Travels";
}

@model PaginatedList<Travel>


<form asp-controller="Travels" asp-action="Index" method="get">
    <input type="text" name="StartLocation" placeholder="Start Location" />
    <input type="submit" value="Search" class="btn btn-primary" />
</form>


@if (Model == null || Model.Count == 0)
{
    <br>
    <h3 class="no-results">No results</h3>
}
else
{
    <div class="travel-list">
        <div class="travel-item header">
            <div class="start-end-locations">
                <div class="label">Start/</div>
                <div class="label">End Location</div>
            </div>
            <div class="label" style="text-align: right;">Departure Time</div>
            <div class="label" style="text-align: right;">Driver</div>
        </div>
        @foreach (var travel in Model)
        {
            <a class="travel-item" href="@Url.Action("Details", "Travels", new { id = travel.Id })">
                <div class="start-end-locations">
                    <div class="location">@travel.StartLocation.City</div>
                    <div class="divider">-</div>
                    <div class="location">@travel.EndLocation.City</div>
                </div>
                <div class="departure-time" style="text-align: right;">@travel.DepartureTime</div>
                <div class="driver" style="text-align: right;">@travel.Driver?.UserName</div>
            </a>
        }
    </div>
}


@*Pagination*@
@{
    string prevButtonState = this.Model.HasPrevPage ? "" : "disabled";
    string nextButtonState = this.Model.HasNextPage ? "" : "disabled";
}

<a asp-controller="Travels" asp-action="Index" asp-route-PageNumber="@(this.Model.PageNumber - 1)" class="btn btn-link @prevButtonState">Prev</a>

@{
    int currentPageNumber = this.Model.PageNumber;
    int totalPages = this.Model.TotalPages;
    int pageRange = 3; // Брой страници, които да се показват преди и след текущата страница
    int startPage = Math.Max(1, currentPageNumber - pageRange);
    int endPage = Math.Min(totalPages, currentPageNumber + pageRange);

    if (startPage > 1)
    {
        <span><a asp-controller="Travels" asp-action="Index" asp-route-PageNumber="1">1</a></span>
        if (startPage > 2)
        {
            <span>...</span>
        }
    }

    for (int i = startPage; i <= endPage; i++)
    {
        if (i == currentPageNumber)
        {
            <span>@i</span>
        }
        else
        {
            <span><a asp-controller="Travels" asp-action="Index" asp-route-PageNumber="@i">@i</a></span>
        }
    }

    if (endPage < totalPages)
    {
        if (endPage < totalPages - 1)
        {
            <span>...</span>
        }
        <span><a asp-controller="Travels" asp-action="Index" asp-route-PageNumber="@totalPages">@totalPages</a></span>
    }
}
<a asp-controller="Travels" asp-action="Index" asp-route-PageNumber="@(this.Model.PageNumber + 1)" class="btn btn-link @nextButtonState">Next</a>
<br>
<br>
<a asp-controller="Travels" asp-action="Index" class="nav">See all travels</a>
